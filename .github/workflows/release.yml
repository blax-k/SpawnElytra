name: Automated Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "pom_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version from pom.xml: $VERSION"
      
      - name: Get latest release tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG (version: $LATEST_VERSION)"
      
      - name: Compare versions
        id: compare
        run: |
          POM_VERSION="${{ steps.extract_version.outputs.pom_version }}"
          LATEST_VERSION="${{ steps.latest_tag.outputs.latest_version }}"
          
          echo "POM version: $POM_VERSION"
          echo "Latest version: $LATEST_VERSION"
          
          if [ "$POM_VERSION" = "$LATEST_VERSION" ]; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Versions match - skipping release"
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Versions differ - will create release"
          fi
      
      - name: Check if pre-release
        id: prerelease
        if: steps.compare.outputs.should_release == 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.pom_version }}"
          LOWER_VERSION=$(echo "$VERSION" | tr '[:upper:]' '[:lower:]')
          
          if [[ "$LOWER_VERSION" == *"snapshot"* ]] || [[ "$LOWER_VERSION" == *"alpha"* ]] || [[ "$LOWER_VERSION" == *"beta"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release version"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release version"
          fi
      
      - name: Build with Maven
        if: steps.compare.outputs.should_release == 'true'
        run: mvn clean package -DskipTests
      
      - name: Find JAR file
        if: steps.compare.outputs.should_release == 'true'
        id: find_jar
        run: |
          JAR_FILE=$(find target -name "*.jar" -not -name "*-original.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found in target directory"
            exit 1
          fi
          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR_FILE"
      
      - name: Create Release
        if: steps.compare.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.pom_version }}
          name: Release v${{ steps.extract_version.outputs.pom_version }}
          body: |
            ## SpawnElytra v${{ steps.extract_version.outputs.pom_version }}
            
            This release was automatically generated from pom.xml version ${{ steps.extract_version.outputs.pom_version }}.
            
            ### Installation
            1. Download the JAR file below
            2. Place it in your server's plugins folder
            3. Restart your server
            
            ### Links
            - [Documentation](https://blaxk.gitbook.io/spawnelytra)
            - [Modrinth](https://modrinth.com/plugin/spawn-elytra)
            
            ---
            **Full Changelog**: ${{ steps.latest_tag.outputs.latest_tag }}...v${{ steps.extract_version.outputs.pom_version }}
          files: ${{ steps.find_jar.outputs.jar_file }}
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release Summary
        if: steps.compare.outputs.should_release == 'true'
        run: |
          echo "### ✅ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ steps.extract_version.outputs.pom_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ steps.latest_tag.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ steps.prerelease.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **JAR File**: ${{ steps.find_jar.outputs.jar_file }}" >> $GITHUB_STEP_SUMMARY
      
      - name: No Release Needed
        if: steps.compare.outputs.should_release == 'false'
        run: |
          echo "### ℹ️ No Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Version in pom.xml (${{ steps.extract_version.outputs.pom_version }}) matches the latest release tag (${{ steps.latest_tag.outputs.latest_tag }})." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To create a new release, update the version in pom.xml." >> $GITHUB_STEP_SUMMARY
